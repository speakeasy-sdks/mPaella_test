/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Display name of your attribute
 */
export enum MintNftIdempotentAlphaRequestBodyMetadataMetadataObjectAttributesDisplayType {
    BoostNumber = "boost_number",
    BoostPercentage = "boost_percentage",
    Number = "number",
}

export class MintNftIdempotentAlphaRequestBodyMetadataMetadataObjectAttributes extends SpeakeasyBase {
    /**
     * Display name of your attribute
     */
    @SpeakeasyMetadata()
    @Expose({ name: "display_type" })
    displayType?: MintNftIdempotentAlphaRequestBodyMetadataMetadataObjectAttributesDisplayType;

    /**
     * The name of the trait
     */
    @SpeakeasyMetadata()
    @Expose({ name: "trait_type" })
    traitType: string;

    /**
     * The value of the trait
     */
    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value: string;
}

/**
 * See https://docs.crossmint.com/docs/metadata for more info.
 */
export class MintNftIdempotentAlphaRequestBodyMetadataMetadataObject extends SpeakeasyBase {
    /**
     * (Optional) [Polygon only] <br> The Mint API natively supports rich metadata within ERC 721 and ERC 1155, including audio, video and/or HTML. <br> Populate the animation_url field as per the OpenSea metadata spec: <br> https://docs.opensea.io/docs/metadata-standards#metadata-structure
     */
    @SpeakeasyMetadata()
    @Expose({ name: "animation_url" })
    animationUrl?: string;

    /**
     * (Optional) Add attributes to your NFT
     */
    @SpeakeasyMetadata({
        elemType: MintNftIdempotentAlphaRequestBodyMetadataMetadataObjectAttributes,
    })
    @Expose({ name: "attributes" })
    @Type(() => MintNftIdempotentAlphaRequestBodyMetadataMetadataObjectAttributes)
    attributes?: MintNftIdempotentAlphaRequestBodyMetadataMetadataObjectAttributes[];

    /**
     * A quick and brief description of your NFT (Max length: 64)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * Direct link to your NFT image
     */
    @SpeakeasyMetadata()
    @Expose({ name: "image" })
    image?: string;

    /**
     * The name of your NFT (Max length: 32)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class MintNftIdempotentAlphaRequestBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    metadata: any;

    /**
     * Recipient address in the format of `<chain>:<address>` or <br> `email:<email_address>:<chain>`.
     *
     * @remarks
     * See https://docs.crossmint.com/docs/recipients for more info.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "recipient" })
    recipient?: string;

    /**
     * (Optional) Any URLs in the metadata object will be resolved and reuploaded to IPFS [Default: true]
     */
    @SpeakeasyMetadata()
    @Expose({ name: "reuploadLinkedFiles" })
    reuploadLinkedFiles?: boolean;
}

export class MintNftIdempotentAlphaRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: MintNftIdempotentAlphaRequestBody;

    /**
     * Every project can mint to their pre-built collections (with IDs 'default-solana' or 'default-polygon'),  or use the [`create-collection`](https://docs.crossmint.com/reference/create-collection) endpoint
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=collectionId" })
    collectionId: string;

    /**
     * Name of the NFT, which is used as an idempotency key
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=nftName" })
    nftName: string;
}

export class MintNftIdempotentAlpha200ApplicationJSONEVMONSUBSEQUENTREQUESTSMetadata extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description: string;

    @SpeakeasyMetadata()
    @Expose({ name: "image" })
    image: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

export class MintNftIdempotentAlpha200ApplicationJSONEVMONSUBSEQUENTREQUESTSONChain extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "chain" })
    chain: string;

    @SpeakeasyMetadata()
    @Expose({ name: "contractAddress" })
    contractAddress: string;

    @SpeakeasyMetadata()
    @Expose({ name: "owner" })
    owner: string;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: string;

    @SpeakeasyMetadata()
    @Expose({ name: "tokenId" })
    tokenId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "txId" })
    txId: string;
}

export class MintNftIdempotentAlpha200ApplicationJSONEVMONSUBSEQUENTREQUESTS extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => MintNftIdempotentAlpha200ApplicationJSONEVMONSUBSEQUENTREQUESTSMetadata)
    metadata: MintNftIdempotentAlpha200ApplicationJSONEVMONSUBSEQUENTREQUESTSMetadata;

    @SpeakeasyMetadata()
    @Expose({ name: "onChain" })
    @Type(() => MintNftIdempotentAlpha200ApplicationJSONEVMONSUBSEQUENTREQUESTSONChain)
    onChain: MintNftIdempotentAlpha200ApplicationJSONEVMONSUBSEQUENTREQUESTSONChain;
}

export class MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataAttributes extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "trait_type" })
    traitType?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}

export class MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataPropertiesCreators extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "address" })
    address?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "share" })
    share?: number;
}

export class MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataPropertiesFiles extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;
}

export class MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataProperties extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    category?: string;

    @SpeakeasyMetadata({
        elemType:
            MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataPropertiesCreators,
    })
    @Expose({ name: "creators" })
    @Type(
        () =>
            MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataPropertiesCreators
    )
    creators?: MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataPropertiesCreators[];

    @SpeakeasyMetadata({
        elemType:
            MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataPropertiesFiles,
    })
    @Expose({ name: "files" })
    @Type(
        () =>
            MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataPropertiesFiles
    )
    files?: MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataPropertiesFiles[];
}

export class MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadata extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType:
            MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataAttributes,
    })
    @Expose({ name: "attributes" })
    @Type(
        () => MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataAttributes
    )
    attributes?: MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataAttributes[];

    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description: string;

    @SpeakeasyMetadata()
    @Expose({ name: "image" })
    image: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "properties" })
    @Type(
        () => MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataProperties
    )
    properties?: MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadataProperties;

    @SpeakeasyMetadata()
    @Expose({ name: "seller_fee_basis_points" })
    sellerFeeBasisPoints?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "symbol" })
    symbol?: string;
}

export class MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSONChain extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "chain" })
    chain: string;

    @SpeakeasyMetadata()
    @Expose({ name: "mintHash" })
    mintHash: string;

    @SpeakeasyMetadata()
    @Expose({ name: "owner" })
    owner: string;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: string;
}

export class MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTS extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadata)
    metadata: MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSMetadata;

    @SpeakeasyMetadata()
    @Expose({ name: "onChain" })
    @Type(() => MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSONChain)
    onChain: MintNftIdempotentAlpha200ApplicationJSONSOLANAONSUBSEQUENTREQUESTSONChain;
}

export class MINTNftIdempotentAlpha200ApplicationJSONEVMONFIRSTMINTREQUESTOnchain extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "chain" })
    chain: string;

    @SpeakeasyMetadata()
    @Expose({ name: "contractAddress" })
    contractAddress: string;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: string;
}

export class MINTNftIdempotentAlpha200ApplicationJSONEVMONFIRSTMINTREQUEST extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    @SpeakeasyMetadata()
    @Expose({ name: "onchain" })
    @Type(() => MINTNftIdempotentAlpha200ApplicationJSONEVMONFIRSTMINTREQUESTOnchain)
    onchain: MINTNftIdempotentAlpha200ApplicationJSONEVMONFIRSTMINTREQUESTOnchain;
}

export class MINTNftIdempotentAlpha200ApplicationJSONSOLANAONFIRSTMINTREQUESTOnchain extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "chain" })
    chain: string;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: string;
}

export class MINTNftIdempotentAlpha200ApplicationJSONSOLANAONFIRSTMINTREQUEST extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    @SpeakeasyMetadata()
    @Expose({ name: "onchain" })
    @Type(() => MINTNftIdempotentAlpha200ApplicationJSONSOLANAONFIRSTMINTREQUESTOnchain)
    onchain: MINTNftIdempotentAlpha200ApplicationJSONSOLANAONFIRSTMINTREQUESTOnchain;
}

export class MintNftIdempotentAlphaResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Invalid arguments, please make sure you're following the api specification.
     */
    @SpeakeasyMetadata()
    error?: shared.ErrorT;

    /**
     * Success.
     */
    @SpeakeasyMetadata()
    mintResponse?: any;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
