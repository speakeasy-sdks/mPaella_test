/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Display name of your attribute
 */
export enum DisplayType {
    BoostNumber = "boost_number",
    BoostPercentage = "boost_percentage",
    Number = "number",
}

export class Attributes extends SpeakeasyBase {
    /**
     * Display name of your attribute
     */
    @SpeakeasyMetadata()
    @Expose({ name: "display_type" })
    displayType?: DisplayType;

    /**
     * The name of the trait
     */
    @SpeakeasyMetadata()
    @Expose({ name: "trait_type" })
    traitType: string;

    /**
     * The value of the trait
     */
    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value: string;
}

/**
 * See https://docs.crossmint.com/docs/metadata for more info.
 */
export class EditNftMetadata extends SpeakeasyBase {
    /**
     * (Optional) [Polygon only] <br> The Mint API natively supports rich metadata within ERC 721 and ERC 1155, including audio, video and/or HTML. <br> Populate the animation_url field as per the OpenSea metadata spec: <br> https://docs.opensea.io/docs/metadata-standards#metadata-structure
     */
    @SpeakeasyMetadata()
    @Expose({ name: "animation_url" })
    animationUrl?: string;

    /**
     * (Optional) Add attributes to your NFT
     */
    @SpeakeasyMetadata({ elemType: Attributes })
    @Expose({ name: "attributes" })
    @Type(() => Attributes)
    attributes?: Attributes[];

    /**
     * A quick and brief description of your NFT (Max length: 64)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description: string;

    /**
     * Direct link to your NFT image
     */
    @SpeakeasyMetadata()
    @Expose({ name: "image" })
    image: string;

    /**
     * The name of your NFT (Max length: 32)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

export class EditNftRequestBody extends SpeakeasyBase {
    /**
     * See https://docs.crossmint.com/docs/metadata for more info.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => EditNftMetadata)
    metadata: EditNftMetadata;

    /**
     * (Optional) Any URLs in the metadata object will be resolved and reuploaded to IPFS [Default: true]
     */
    @SpeakeasyMetadata()
    @Expose({ name: "reuploadLinkedFiles" })
    reuploadLinkedFiles?: boolean;
}

export class EditNftRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: EditNftRequestBody;

    /**
     * Every project can mint to their pre-built collections (with IDs 'default-solana' or 'default-polygon'),  or use the [`create-collection`](https://docs.crossmint.com/reference/create-collection) endpoint
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=collectionId" })
    collectionId: string;

    /**
     * Unique ID of the mint as returned as part of the NFT creation response
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
    id: string;
}

export class EditNftResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;
}
