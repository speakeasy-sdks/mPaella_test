/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class Recipients extends SpeakeasyBase {
    /**
     * Address where the payments will be received. Note: ENS addresses are not supported.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "address" })
    address?: string;

    /**
     * Proportion of the sale price that will go to the recipient address. A basis point is a standard measure for percentages in finance. One basis point equals 1/100th of 1%, or 0.01%.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "basisPoints" })
    basisPoints?: number;
}

export class EditRoyaltyInformationRequestBody extends SpeakeasyBase {
    /**
     * List of royalty recipients. Note: EVM collections support only a single recipient. Use a contract splitter as recipient in order to send payments to multiple addresses.
     */
    @SpeakeasyMetadata({ elemType: Recipients })
    @Expose({ name: "recipients" })
    @Type(() => Recipients)
    recipients?: Recipients[];
}

export class EditRoyaltyInformationRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: EditRoyaltyInformationRequestBody;

    /**
     * Collection identifier. For pre-built collections use IDs 'default-solana' or 'default-polygon'. use the result of the [`create-collection`](https://docs.crossmint.com/reference/create-collection) endpoint to get the identifier for custom collections.
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=collectionId" })
    collectionId: string;
}

export class EditRoyaltyInformationResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;
}
