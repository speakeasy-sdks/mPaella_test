/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Blockchain you would like to use for this collection
 */
export enum CreateCollectionCustomRequestBodyChain {
    Polygon = "polygon",
    Solana = "solana",
}

/**
 * See https://docs.crossmint.com/docs/metadata for more info.
 */
export class CreateCollectionCustomRequestBodyMetadata extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "imageUrl" })
    imageUrl?: string;

    /**
     * Collection name (Max length: 32)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * NFT collection symbol (Polygon ONLY)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "symbol" })
    symbol?: string;
}

export class CreateCollectionCustomRequestBody extends SpeakeasyBase {
    /**
     * Blockchain you would like to use for this collection
     */
    @SpeakeasyMetadata()
    @Expose({ name: "chain" })
    chain?: CreateCollectionCustomRequestBodyChain;

    /**
     * See https://docs.crossmint.com/docs/metadata for more info.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => CreateCollectionCustomRequestBodyMetadata)
    metadata: CreateCollectionCustomRequestBodyMetadata;

    /**
     * (Optional) Any URLs in the metadata object will be resolved and reuploaded to IPFS [Default: true]
     */
    @SpeakeasyMetadata()
    @Expose({ name: "reuploadLinkedFiles" })
    reuploadLinkedFiles?: boolean;
}

export class CreateCollectionCustomRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody?: CreateCollectionCustomRequestBody;

    /**
     * The ID of the named collection, which you will use to create new NFTs and get status
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=collectionId" })
    collectionId: string;
}

export class CreateCollectionCustomResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
